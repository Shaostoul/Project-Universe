 <PropCollection>
 	<props>
 		<Props name="Wall_LifeSupportPiping">
			<type>Wall</type>
 			<model_path>Models/Props/Walls/nukeguard/Prop - Wall_LifeSupportPiping</model_path>
                        <material_path>path2</material_path>
			<Scalable>false</Scalable>
 		</Props>
 	</props>
 </PropCollection>

float minLayers = 30;
float maxLayers = 60;
float numLayers = lerp(maxLayers, minLayers, abs(dot(float3(0, 0, 1), viewDir)));

float numSteps = numLayers;//60.0f; // How many steps the UV ray tracing should take
float height = 1.0;
float step = 1.0 / numSteps;

float2 offset = uv.xy;
float4 HeightMap = HeightTex.Sample(sampleState, offset);

float2 delta = viewDir.xy * heightScale / (viewDir.z * numSteps);

// find UV offset
for (float i = 0.0f; i < numSteps; i++) {
    if (HeightMap.r < height) {
      height -= step;
      offset += delta;
      HeightMap = HeightTex.Sample(sampleState, offset);
    } else {
      break;
    }
  }
  Out = offset;
  
      
      
      float4 result = float4(1,1,1,1);
float BW = 0;
float totaloffset = 0;

for (int i = 0; i < Iterations; ++i){
	totaloffset += ParallaxOffset;
	float2 offset = float2( (ViewDirection * totaloffset).r,(ViewDirection * totaloffset).g);
	BW = SAMPLE_TEXTURE2D( Mask, SS, (UV + offset)).r;
result *= clamp(BW + ( i / Iterations),0,1);
}
result.a = 1;

Out = result;